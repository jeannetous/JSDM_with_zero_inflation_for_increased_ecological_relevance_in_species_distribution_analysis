---
title: "Species association networks unveil scale effects in community assemblage mechanisms."
author: "Jeanne Tous, Julien Chiquet"
format: html
editor: visual
---

## Useful libraries & functions

```{r}
library(dplyr)
# library(PLNmodels)
library(igraph)
```

```{r}
plot_network = function(net             ,
                         type            ,
                         output          ,
                         edge.color      = c("#F8766D", "#00BFC4"),
                         remove.isolated = FALSE,
                         node.labels     = NULL,
                         layout          = layout_in_circle,
                         plot = TRUE) {

  if (output == "igraph") {

    G <-  graph_from_adjacency_matrix(net, mode = "undirected", weighted = TRUE, diag = FALSE)

    if (!is.null(node.labels)) {
      igraph::V(G)$label <- node.labels
    } else {
      igraph::V(G)$label <- colnames(net)
    }
    ## Nice nodes
    V.deg <- degree(G)/sum(degree(G))
    igraph::V(G)$label.cex <- V.deg / max(V.deg) + .5
    igraph::V(G)$size <- V.deg * 100
    igraph::V(G)$label.color <- rgb(0, 0, .2, .8)
    igraph::V(G)$frame.color <- NA
    ## Nice edges
    igraph::E(G)$color <- ifelse(igraph::E(G)$weight > 0, edge.color[1], edge.color[2])
    if (type == "support")
      igraph::E(G)$width <- abs(igraph::E(G)$weight)
    else
      igraph::E(G)$width <- 15*abs(igraph::E(G)$weight)

    if (remove.isolated) {
      G <- delete.vertices(G, which(degree(G) == 0))
    }
    if (plot) plot(G, layout = layout)
  }
  if (output == "corrplot") {
    if (plot) {
      if (ncol(net) > 100)
        colnames(net) <- rownames(net) <- rep(" ", ncol(net))
      G <- net
      diag(net) <- 0
      corrplot(as.matrix(net), method = "color", is.corr = FALSE, tl.pos = "td", cl.pos = "n", tl.cex = 0.5, type = "upper")
    } else  {
      G <- net
    }
  }
  invisible(G)
}

```

## Loading & formatting data

### Regional dataset

```{r}
load("REGIONAL_DATASET_COUNTS.Rdata")
load("REGIONAL_DATASET_COVARIATES.Rdata")
```

```{r}
regional_data <- prepare_data(counts     = REGIONAL_DATASET_COUNTS,
                              covariates = REGIONAL_DATASET_COVARIATES)
```

### Northern Range dataset

```{r}
load("NORTHERN_RANGE_DATASET_COUNTS.Rdata")
load("NORTHERN_RANGE_DATASET_COVARIATES.Rdata")
```

```{r}
northern_range_data <- prepare_data(counts     = NORTHERN_RANGE_DATASET_COUNTS,
                                    covariates = NORTHERN_RANGE_DATASET_COVARIATES)
```

## Running the ZIPLN-network model

We fix the seed for reproducibility.

```{r}
set.seed(1)
```

### Regional dataset

```{r}
regional_model <- ZIPLNnetwork(Abundance ~ 1 + LONGLAT, data = regional_data, control = ZIPLNnetwork_param(min_ratio = 0.001,  penalize_diagonal = FALSE), zi = "col")

```

We select a penalty using stability selection process StARS. As it stability selection requires a long time to run, we memorize the corresponding penalty and later use it directly to access the model selected with StARS.

```{r}
# regional_model_StARS <- regional_model$getBestModel("StARS")
regional_model_StARS <- regional_model$getModel(0.06881528)  # Avec le code git
# regional_model_StARS <- regional_model$getModel(0.4222431) # Avec la librairie
```

### Northern Range dataset

```{r}
northern_range_model <- ZIPLNnetwork(Abundance ~ 1 + LONGLAT, data = northern_range_data, control = ZIPLNnetwork_param(min_ratio = 0.001,  penalize_diagonal = FALSE), zi = "col")

```

We select a penalty using stability selection process StARS. As it stability selection requires a long time to run, we memorize the corresponding penalty and later use it directly to access the model selected with StARS.

```{r}

# northern_range_model_StARS <- northern_range_model$getBestModel("StARS")
northern_range_model_StARS <- northern_range_model$getModel(0.09219056)
```

## Resulting networks

We want to place species the datasets share in the same order for readibility.

```{r}
regional_species       <- colnames(regional_data$Abundance)
northern_range_species <- colnames(northern_range_data$Abundance)
intersecting_species   <- intersect(northern_range_species, regional_species)
```

### Regional network

Sorting species names.

```{r}
regional_sorted_species <- c(intersecting_species, regional_species[! regional_species %in% intersecting_species])
```

Extracting the association network from the model.

```{r}
regional_network        <- as.matrix(regional_model_StARS$latent_network("partial_cor"))
regional_sorted_indices <- match(regional_sorted_species, colnames(regional_network))
regional_network        <- regional_network[regional_sorted_indices, regional_sorted_indices] 
```

```{r}
plot_network(regional_network,
             type            = "partial_cor",
             output          = "igraph",
             edge.color      = c("#F8766D", "#00BFC4"),
             remove.isolated = FALSE,
             node.labels     = NULL,
             layout          = layout_in_circle,
             plot            = TRUE)
```

### Northern Range network

Sorting species names.

```{r}
northern_range_sorted_species <- c(intersecting_species, northern_range_species[! northern_range_species %in% intersecting_species])
```

```{r}
northern_range_network        <- as.matrix(northern_range_model_StARS$latent_network("partial_cor"))
northern_range_sorted_indices <- match(northern_range_sorted_species, colnames(northern_range_network))
northern_range_network        <- northern_range_network[northern_range_sorted_indices, northern_range_sorted_indices] 
```

```{r}
plot_network(northern_range_network,
             type            = "partial_cor",
             output          = "igraph",
             edge.color      = c("#F8766D", "#00BFC4"),
             remove.isolated = FALSE,
             node.labels     = NULL,
             layout          = layout_in_circle,
             plot            = TRUE)
```
